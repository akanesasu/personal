Step 1. 클래스, 필드 생성
- 주문을 위한 Order 클래스를 Order.java에 구현
클래스 안에는 고객이 선택한 메뉴와 잔수를 받아올 수 있는 필드를 생성
접근제한자는 적절한 것으로 선택
- 카페니까 Starbucks 클래스를 Starbucks.java에 구현
스벅이니까 닉네임도 있어야겠고 가격까지 필드 생성
배열로 메뉴랑 가격도 생성함

Step 2. 생성자 생성
- 각 클래스에 필드가 다 들어가있는 생성자를 생성

Step 3. 상속관계 형성, 인터페이스 구현
- Order과 Starbucks 클래스 간에 상속관계를 구현
- Order.java에 Orderable 인터페이스 구현
- Orderable 인터페이스에는 추상메소드 인사(welcome), 주문(order), 픽업(pickup) 구현

Step 4. 간단한 메소드부터 채우기
- welcome : 인사말 출력
- pickup : getter로 닉네임과 메뉴, 잔수가 들어간 멘트 출력

Step 5. order 메소드 채우기 1
- 코딩할 때 getter/setter만 사용해서 변수입력하고 불러오기(어려우면 일단 변수이름 써넣고 나중에 바꾸기)
- for문으로 메뉴판 출력
- 주문할 메뉴 이름을 String으로 입력
- while문으로 선택한 메뉴에 따른 가격 설정
- 잔수도 입력받기
- 주문 확인으로 메뉴이름, 잔수, 총가격 출력

Step 6. order 메소드 채우기 2
- DecimalFormat으로 총가격에 천의 자리 콤마 넣기
- 자바칩프라푸치노 주문시 휘핑크림 넣는지 여부를 if문으로 구현, boolean으로 t/f에 따라서 넣는지 빼는지 출력하기

Step 7. 실행 클래스 만들기
- order객체를 만들 때 필요한 생성자에 초기값을 채우기 위한 필드 선언 및 초기화
- 다형성을 사용하여 order 객체 생성
- 닉네임은 입력받고 getter/setter를 사용해서 생성자에 들어갈 값 채우기
- 다형성을 사용하여 3개의 메소드 호출

Step 8. 추가 기능
- 예외처리 : 메뉴판에 없는 것을 시킨다든가, 잔수가 음수라든가 할 때 메시지 출력 혹은 IOStream 쓸 때 try-with-resource 사용
- CF, 제네릭 : 배열 대신 ArrayList 아니면 아예 Map으로 받아서 메뉴이름과 가격을 한꺼번에 저장, 이 과정에서 제네릭을 사용
- 람다 : welcome같이 간단한 메소드들은 람다식으로 바꿔서 기술해보기
- 스트림 : 메뉴판 출력에 사용해보기
- 쓰레드 : 굳이 넣자면 간단하게 구현만 해놓고 주문끝나고 메뉴나오기 전에 잠깐 sleep시키기
- 입출력 : Scanner를 모두 IOStream으로 바꾸기, 주문내역서를 txt파일로 내보내기(영수증처럼), 회원정보 txt파일을 만들어서 닉네임 대신 전화번호나 회원번호를 입력하면 닉네임이 알아서 불러와지게 하기
